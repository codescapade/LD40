{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/baseSprite.ts","src/bullet.ts","src/enemy.ts","src/generator.ts","src/globals.ts","src/main.ts","src/player.ts","src/snake.ts","src/states/bootState.ts","src/states/gameState.ts","src/states/preloadState.ts"],"names":[],"mappings":"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","file":"bundle.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","import { Globals } from './globals';\n\nexport class BaseSprite extends Phaser.Sprite {\n  public gridPosition:Phaser.Point;\n\n  constructor (game:Phaser.Game, gridX:number, gridY:number, atlas:string, spriteName:string ) {\n    let worldPos:Phaser.Point = Globals.toWorld(gridX, gridY);\n    super(game, worldPos.x, worldPos.y, atlas, spriteName);\n    this.anchor.set(0.5, 0.5);\n    this.game.add.existing(this);\n    this.gridPosition = new Phaser.Point(gridX, gridY);\n\n  } // constructor\n\n  public updatePosition (gridX:number, gridY:number):void {\n    this.gridPosition.set(gridX, gridY);\n    let worldPos = Globals.toWorld(gridX, gridY);\n    this.position.set(worldPos.x, worldPos.y);\n\n  } // updatePosition\n\n} // BaseSprite\n","import { BaseSprite } from \"./baseSprite\";\nimport { GameState } from \"./states/gameState\";\nimport { SpriteType } from \"./globals\";\n\n\nexport class Bullet extends BaseSprite {\n  private _delay:number = 20;\n  private _timer:number = 0;\n\n  private _direction:Phaser.Point = new Phaser.Point;\n\n  private _state:GameState;\n\n  constructor(state:GameState, gridX:number, gridY:number, color:string) {\n    super(state.game, gridX, gridY, 'sprites', color + '_bullet');\n    this.frameName = 'green_bullet';\n    this._state = state;\n\n  } // constructor\n\n  public update ():void {\n    if (!this.alive) {\n      return;\n    }\n\n    if (this._timer < this._delay) {\n      this._timer += this._state.time.elapsed;\n    } else {\n      this._timer = 0;\n      this._move();\n    }\n\n  } // update\n\n  public shoot (x:number, y:number, direction:Phaser.Point, angle:number):void {\n    this.updatePosition(x, y);\n    this.angle = angle;\n    this._direction = direction.clone();\n    this.revive();\n    this._timer = 0;\n\n    if (this._isColliding(x, y)) {\n      this._die();\n    }\n  } // shoot\n\n  private _move ():void {\n    let newX = this.gridPosition.x + this._direction.x;\n    let newY = this.gridPosition.y + this._direction.y;\n\n    if (this._isColliding(newX, newY)) {\n      this._die();\n      return;\n    }\n    this.updatePosition(newX, newY);\n\n  } // _move\n\n  private _isColliding (x:number, y:number):boolean {\n    let index = this._state.map.getTile(x, y).index;\n    if (index > 0 && index < 4) {\n      this._updateMap(x, y);\n      return true;\n    }\n\n    if (this._state.player.hitBody(SpriteType.BULLET, x, y)) {\n      return true;\n    }\n\n    return false;\n\n  } // _isColliding\n\n  private _die ():void {\n    this.kill();\n    // maybe add explosion later\n\n  } // _die\n\n  private _updateMap (x:number, y:number):void {\n    if (x <= 0 || x >= this._state.map.width - 1 || y <= 0 || y >= this._state.map.height - 1) {\n      return;\n    }\n\n    this._state.map.putTile(0, x, y, 0);\n\n    for (let yi = y - 1; yi <= y + 1; yi++) {\n      for (let xi = x - 1; xi <= x + 1; xi++) {\n        if (yi < 0 || yi > this._state.map.height - 1 ||\n            xi < 0 || xi > this._state.map.width - 1) {\n          continue;\n        }\n        \n        if (this._state.map.getTile(xi, yi).index == 2) {\n          if (xi == 0 || xi == this._state.map.width - 1 || yi == 0 || yi == this._state.map.height - 1) {\n            this._state.map.putTile(3, xi, yi, 0);\n          } else {\n            this._state.map.putTile(1, xi, yi, 0);\n          }\n        }\n      }\n    }\n\n  } // _updateMap\n\n} // Bullet","import { Snake } from './snake';\nimport { Bullet } from './bullet';\nimport { GameState } from './states/gameState';\nimport { BaseSprite } from './baseSprite';\n\nexport class Enemy extends Snake {\n  private _bullet:Bullet;\n  private _colors:string[];\n  private _color:string;\n  private _directions:Phaser.Point[];\n\n  constructor (state:GameState, gridX:number, gridY:number, delay:number) {\n    super(state, gridX, gridY, delay, 'sprites', 'red', 0, false);\n    this._colors = ['green', 'red']\n    this._color = this._colors[state.game.rnd.between(0, 1)];\n\n    this._snakeHead.frameName = this._color + '_snake_head';\n    \n    this._directions = [new Phaser.Point(1, 0), new Phaser.Point(-1, 0),\n        new Phaser.Point(0, 1), new Phaser.Point(0, -1)];\n  } // constructor\n\n  public update () {\n    this._setNewDirection();\n    super.update();\n  }\n\n  private _setNewDirection ():void {\n    let foundDirection:boolean = false;\n    let nr:number;\n    let dir:Phaser.Point;\n\n    while (!foundDirection) {\n      nr = this._state.game.rnd.between(0, 3);\n      dir = this._directions[nr];\n      let newX:number = this._snakeHead.gridPosition.x + dir.x;\n      let newY:number = this._snakeHead.gridPosition.y + dir.y;\n      \n      if (this._state.map.getTile(newX, newY).index == 0) {\n        foundDirection = true;\n      }\n    }\n\n    this._desiredDirection = dir;\n    if (nr == 0) {\n      this._desiredRotation = 0;\n    } else if (nr == 1) {\n      this._desiredRotation = 180;\n    } else if (nr == 2) {\n      this._desiredRotation = 90;\n    } else if (nr == 3) {\n      this._desiredRotation = 270;\n    }\n  }\n\n} // Enemy","\nexport class Generator {\n  private _width:number;\n  private _height:number;\n  private _game:Phaser.Game;\n  private _map:number[][];\n\n  constructor(game:Phaser.Game, width:number, height:number) {\n    this._game = game;\n    this._width = width;\n    this._height = height;\n    this._map = [];\n\n    for (let y = 0; y < height; y++) {\n      let row:number[] = [];\n      for (let x = 0; x < width; x++) {\n        row.push(1);\n      }\n      this._map.push(row);\n    }\n\n  } // constructor\n\n  public buildMap (nrRooms:number, minSize:number, maxSize:number, minOverlap:number, maxOverlap:number):string {\n    let room:Phaser.Rectangle = this._getRndRoom(minSize, maxSize, true);\n    this._createRoom(room);\n\n    let totalRooms:number = 1;\n\n    let totalTries:number = 300;\n    let timesTried:number = 0;\n    let foundPlace:boolean = false;\n    while (totalRooms < nrRooms) {\n      timesTried = 0;\n      foundPlace = false;\n      while(!foundPlace && timesTried < totalTries) {\n        room = this._getRndRoom(minSize, maxSize, false);\n        let overlap:number = this._countTiles(room);\n        if (overlap >= minOverlap && overlap <= maxOverlap) {\n          foundPlace = true;\n          this._createRoom(room);\n        }\n        timesTried++;\n      }\n      totalRooms++;\n    }\n\n    this._removeDoubleWalls();\n    this._setOuterWalls();\n    this._setGoal();\n\n    return this._getCSV();\n\n  } // buildMap\n\n  private _getRndRoom (minSize:number, maxSize:number, firstRoom:boolean):Phaser.Rectangle {\n    let roomWidth:number = this._game.rnd.between(minSize, maxSize);\n    let roomHeight:number = this._game.rnd.between(minSize, maxSize);\n    let x:number;\n    let y:number;\n    if (firstRoom) {\n      x = Math.floor(this._width * 0.5 - roomWidth * 0.5);\n      y = Math.floor(this._height * 0.5 - roomHeight * 0.5);\n    } else {\n      x = this._game.rnd.between(1, this._width - roomWidth - 1);\n      y = this._game.rnd.between(1, this._height - roomHeight - 1);\n    }\n\n    return new Phaser.Rectangle(x, y, roomWidth, roomHeight);\n\n  } // getRndRoom\n\n  private _countTiles (room:Phaser.Rectangle):number {\n    let count = 0;\n    for (let y = room.y; y < room.y + room.height; y++) {\n      for (let x = room.x; x < room.x + room.width; x++) {\n        if (this._map[y][x] == 0) {\n          count++;\n        }\n      }\n    }\n\n    return count;\n\n  } // countTiles\n\n  private _createRoom (room:Phaser.Rectangle):void {\n    for (let y = room.y; y < room.y + room.height; y++) {\n      for (let x = room.x; x < room.x + room.width; x++) {\n        this._map[y][x] = 0;\n      }\n    }\n  } // createRoom\n\n  private _allNeigborsAreWalls (x:number, y:number):boolean {\n    if (x - 1 >= 0 && y - 1 >= 0 && this._map[y - 1][x - 1] == 0) {\n      return false;\n    }\n\n    if (x - 1 >= 0 && this._map[y][x - 1] == 0) {\n      return false;\n    }\n\n    if (x - 1 >= 0 && y + 1 < this._height && this._map[y + 1][x - 1] == 0) {\n      return false;\n    }\n\n    if (y + 1 < this._height && this._map[y + 1][x] == 0) {\n      return false;\n    }\n\n    if (x + 1 < this._width && y + 1 < this._height && this._map[y + 1][x + 1] == 0) {\n      return false;\n    }\n\n    if (x + 1 < this._width && this._map[y][x + 1] == 0) {\n      return false;\n    }\n\n    if (x + 1 < this._width && y - 1 >= 0 && this._map[y - 1][x + 1] == 0) {\n      return false;\n    }\n\n    if (y - 1 >= 0 && this._map[y - 1][x] == 0) {\n      return false;\n    }\n\n    return true;\n\n  } // allNeighborsAreWalls\n\n  private _removeDoubleWalls ():void {\n    let wallsToRemove:Phaser.Point[] = [];\n    for (let y = 0; y < this._height; y++) {\n      for (let x = 0; x < this._width; x++) {\n        if (this._allNeigborsAreWalls(x, y)) {\n          wallsToRemove.push(new Phaser.Point(x, y));\n        }\n      }\n    }\n\n    for (let i = 0; i < wallsToRemove.length; i++) {\n      let wallPos:Phaser.Point = wallsToRemove[i];\n      this._map[wallPos.y][wallPos.x] = 2;\n    }\n\n  } // remvoeDoubleWalls\n\n  private _setOuterWalls ():void {\n    for (let y = 0; y < this._height; y++) {\n      for (let x = 0; x < this._width; x++) {\n        if (x == 0 || x == this._width - 1 || y == 0 || y == this._height - 1) {\n          if (this._map[y][x] == 1) {\n            this._map[y][x] = 3;\n          }\n        }\n      }\n    }\n\n  } // _setOuterwalls\n\n  private _setGoal ():void {\n    let foundPosition:boolean = false;\n    let rndX:number = 0;\n    let rndY:number = 0;\n    while (!foundPosition) {\n      rndX = this._game.rnd.between(1, this._width - 2);\n      rndY = this._game.rnd.between(1, this._height - 2);\n      if (this._map[rndY][rndX] == 0) {\n        foundPosition = true;\n        for (let y = rndY - 1; y <= rndY + 1; y++) {\n          for (let x = rndX - 1; x <= rndX + 1; x++) {\n            if (this._map[y][x] != 0) {\n              foundPosition = false;\n            }\n          }\n        }\n        \n      }\n    }\n\n    this._map[rndY][rndX] = 4;\n\n  } // _setGoal\n\n  private _getCSV ():string {\n    let csvString:string = '';\n    for (let y = 0; y < this._height; y++) {\n      for (let x = 0; x < this._width; x++) {\n        csvString += this._map[y][x].toString();\n        csvString += ',';\n      }\n      csvString = csvString.replace(/,\\s*$/, '');\n      csvString += '\\n';\n    }\n\n    return csvString;\n\n  } // getCSV\n\n} // Generator\n\nexport class Level {\n\n}","export class Globals {\n  public static readonly TILESIZE:number = 20;\n  \n  public static seed:number = 0;\n\n  public static toGrid (x:number, y:number):Phaser.Point {\n    return new Phaser.Point(Math.floor(x / Globals.TILESIZE), Math.floor(y / Globals.TILESIZE));\n  }\n\n  public static toWorld (x:number, y:number):Phaser.Point {\n    return new Phaser.Point(x * Globals.TILESIZE + Globals.TILESIZE * 0.5,\n      y * Globals.TILESIZE + Globals.TILESIZE * 0.5);\n  }\n}\n\nexport enum SpriteType {\n  BODY,\n  HEAD,\n  BULLET,\n  NONE\n}","\nimport { BootState } from './states/bootState';\nimport { PreloadState } from './states/preloadState';\nimport { GameState } from './states/gameState';\n\nclass Main extends Phaser.Game {\n  constructor () {\n    super(640, 480, Phaser.AUTO, 'container', null);\n\n    this.state.add('boot', BootState);\n    this.state.add('preload', PreloadState);\n    this.state.add('game', GameState);\n\n    this.state.start('boot');\n\n  } // constructor\n\n} // Main\n\nwindow.onload = () => {\n  new Main();\n  console.log('window loaded');\n}; // window.onload\n","import { Globals, SpriteType } from './globals';\nimport { BaseSprite } from './baseSprite';\nimport { GameState } from './states/gameState';\nimport { Snake } from './snake';\nimport { Bullet } from './bullet';\n\nexport class Player extends Snake {\n  private _leftKey:Phaser.Key;\n  private _rightKey:Phaser.Key;\n  private _upKey:Phaser.Key;\n  private _downKey:Phaser.Key;\n  private _shootKey:Phaser.Key;\n\n  private _bullet:Bullet;\n\n  private _goalTimer:number = 0;\n  private _goalDelay:number = 50;\n  private _addingToGoal:boolean = false;\n\n  private _multiplier:number = 1;\n  private _basicScore:number = 2;\n\n  constructor (state:GameState, gridX:number, gridY:number, delay:number) {\n    super(state, gridX, gridY, delay, 'sprites', 'blue', 0, true);\n\n    this._bullet = new Bullet(state, 0, 0, 'blue');\n    this._bullet.kill();\n\n    \n    this._leftKey = this._state.game.input.keyboard.addKey(Phaser.Keyboard.LEFT);\n    this._rightKey = this._state.game.input.keyboard.addKey(Phaser.Keyboard.RIGHT);\n    this._upKey = this._state.game.input.keyboard.addKey(Phaser.Keyboard.UP);\n    this._downKey = this._state.game.input.keyboard.addKey(Phaser.Keyboard.DOWN);\n    this._shootKey = this._state.game.input.keyboard.addKey(Phaser.Keyboard.SPACEBAR);\n\n    this._state.game.camera.roundPx = true;\n    this._state.game.camera.x = this._snakeHead.x - this._state.game.width * 0.5;\n    this._state.game.camera.y = this._snakeHead.y - this._state.game.height * 0.5;\n    this._state.game.camera.follow(this._snakeHead, Phaser.Camera.FOLLOW_TOPDOWN_TIGHT);\n\n  } // constructor\n\n  public update () {\n    if (this._onGoal && this._snakeBody.length > 0) {\n      if (!this._addingToGoal) {\n        this._addingToGoal = true;\n        this._multiplier = this._snakeBody.length;\n        this._goalTimer = 0;\n      }\n\n      if (this._goalTimer < this._goalDelay) {\n        this._goalTimer += this._state.time.elapsed;\n      } else {\n        this._goalTimer = 0;\n        this._addToGoal();\n      }\n      return;\n    }\n\n    this._updateInput();\n    super.update();\n    \n  } // update\n\n  private _updateInput () {\n    if (this._leftKey.justDown) {\n      this._desiredDirection.set(-1, 0);\n      this._desiredRotation = 180;\n    } else if (this._rightKey.justDown) {\n      this._desiredDirection.set(1, 0);\n      this._desiredRotation = 0;\n    } else if (this._upKey.justDown) {\n      this._desiredDirection.set(0, -1);\n      this._desiredRotation = 270;\n    } else if (this._downKey.justDown) {\n      this._desiredDirection.set(0, 1);\n      this._desiredRotation = 90;\n    }\n\n    if (this._shootKey.justDown && !this._bullet.alive) {\n      this._shoot();\n    }\n\n  } // _updateInput\n\n  private _shoot ():void {\n    if (this._snakeBody.length == 0) {\n      return;\n    }\n\n    // remove the last snake part from the array and kill it\n    this._snakeBody.pop().kill();\n\n    let bulletX = this._snakeHead.gridPosition.x + this._currentDirection.x;\n    let bulletY = this._snakeHead.gridPosition.y + this._currentDirection.y;\n    this._bullet.shoot(bulletX, bulletY, this._currentDirection, this._snakeHead.angle);\n  \n  } // _shoot\n\n  private _addToGoal ():void {\n    this._snakeBody.pop().kill();\n    this._state.updateScore(this._multiplier);\n\n    if (this._snakeBody.length == 0) {\n      if (this._delay > 50) {\n        this._delay -= 10;\n      }\n      this._addingToGoal = false;\n      this._multiplier = 0;\n      this._goalTimer = 0;\n    }\n\n  } // _addToGoal\n\n} // Player","import { Globals,  SpriteType } from './globals';\nimport { BaseSprite } from './baseSprite';\nimport { GameState } from './states/gameState';\n\nexport class Snake {\n  protected _desiredDirection:Phaser.Point;\n  protected _currentDirection:Phaser.Point;\n  protected _desiredRotation:number;\n\n  protected _delay:number;\n\n  protected _snakeHead:BaseSprite;\n  protected _snakeBody:BaseSprite[] = [];\n\n  protected _bodyGroup:Phaser.Group;\n\n  protected _state:GameState;\n\n  protected _onGoal:boolean = false;\n\n  private _timer:number = 0;\n\n  private _isPlayer:boolean;\n\n  constructor (state:GameState, gridX:number, gridY:number, delay:number,\n      spriteSheet:string, spriteColor:string, size:number, isPlayer:boolean) {\n    this._delay = delay;\n    this._state = state;\n    this._isPlayer = isPlayer;\n\n    this._desiredDirection = new Phaser.Point(1, 0);\n    this._currentDirection = this._desiredDirection.clone();\n\n    this._snakeHead = new BaseSprite(this._state.game, gridX, gridY, spriteSheet,\n        spriteColor + '_snake_head');\n    \n    if (this._isPlayer) {\n      this._bodyGroup = this._state.add.group();\n      this._bodyGroup.classType = BaseSprite;\n      for (let i = 0; i < 500; i++) {\n        let part:BaseSprite = new BaseSprite(this._state.game, 0, 0, spriteSheet,\n            spriteColor + '_snake_body');\n        part.kill();\n        this._bodyGroup.add(part);\n      }\n      \n      for (let i = 1; i <= size; i++) {\n        let bodyPart:BaseSprite = this._bodyGroup.getFirstExists(false);\n        bodyPart.revive();\n        bodyPart.updatePosition(gridX - i, gridY);\n        this._snakeBody.push(bodyPart);\n      }\n    }\n\n  } // constructor\n\n  public update ():void {\n    if (this._timer < this._delay) {\n      this._timer += this._state.time.elapsed;\n    } else {\n      this._timer = 0;\n      this._updateSnake();\n    }\n\n  } // update\n\n  public hitHead (type:SpriteType, x:number, y:number):boolean {\n    if (this._snakeHead.gridPosition.x == x &&  this._snakeHead.gridPosition.y == y) {\n      // TODO take action when hit by an enemy or bullet\n      return true;\n    }\n\n    return false;\n\n  } // hitHead\n\n  public hitBody (type:SpriteType, x:number, y:number):boolean {\n    if (!this._isPlayer) {\n      return false;\n    }\n\n    let index:number = -1;\n    for (let i = 0; i < this._snakeBody.length; i++) {\n      let part:BaseSprite = this._snakeBody[i];\n      if (part.gridPosition.x == x && part.gridPosition.y == y) {\n        index = i;\n        break;\n      }\n    }\n\n    if (index >= 0 && type == SpriteType.BULLET) {\n      //let total = this._snakeBody.length - index;\n      console.log(index);\n      for (let i = this._snakeBody.length - 1; i >= index; i--) {\n        this._snakeBody[i].kill();\n        this._snakeBody.splice(i, 1);\n      }\n    }\n\n    return index > -1;\n  \n  } // hitBody\n\n  protected _updateSnake ():void {\n    let difference:Phaser.Point = Phaser.Point.add(this._desiredDirection, this._currentDirection);\n    if (difference.x != 0 || difference.y != 0) {\n      this._currentDirection = this._desiredDirection.clone();\n      this._snakeHead.angle = this._desiredRotation;\n    }\n\n    let newX:number = this._snakeHead.gridPosition.x + this._currentDirection.x;\n    let newY:number = this._snakeHead.gridPosition.y + this._currentDirection.y;\n\n    let index:number = this._state.map.getTile(newX, newY, 0).index;\n    if (index > 0 && index < 4) {\n      // dead\n      return;\n    }\n\n    if (this._isPlayer) {\n      if (this.hitBody(SpriteType.NONE, newX, newY)) {\n        // dead\n        return;\n      }\n\n      \n      if (index == 4) {\n        this._onGoal = true;\n      } else {\n        this._onGoal = false;\n      }\n\n      if (this._state.food.gridPosition.x == newX && this._state.food.gridPosition.y == newY) {\n        this._updateSnakePositon(true);\n        this._state.updateFood();\n      } else {\n        this._updateSnakePositon(false);\n      }\n    }\n    else {\n      this._updateSnakePositon(false);\n    }\n  } // _updateSnake\n\n  protected _updateSnakePositon (grow:boolean):void {\n    let oldX = this._snakeHead.gridPosition.x;\n    let oldY = this._snakeHead.gridPosition.y;\n\n    let newX = oldX + this._currentDirection.x;\n    let newY = oldY + this._currentDirection.y;\n\n    this._snakeHead.updatePosition(newX, newY);\n    if (grow) {\n      let newPart:BaseSprite = this._bodyGroup.getFirstExists(false);\n      newPart.revive();\n      newPart.updatePosition(oldX, oldY);\n      this._snakeBody.unshift(newPart);\n    } else {\n      if (this._snakeBody.length == 0) {\n        return;\n      }\n      let lastPart:BaseSprite = this._snakeBody.pop();\n      lastPart.updatePosition(oldX, oldY);\n      this._snakeBody.unshift(lastPart);\n    }\n\n  } // _updateSnakePosition\n\n} // Snake","import { Globals } from '../globals';\n\nexport class BootState extends Phaser.State {\n  public preload ():void {\n    this.stage.disableVisibilityChange = false;\n    this.stage.smoothed = false;\n    this.scale.pageAlignHorizontally = true;\n    this.scale.pageAlignVertically = true;\n\n    Phaser.Canvas.setImageRenderingCrisp(this.game.canvas);\n\n    this.time.advancedTiming = true;\n\n    Globals.seed = this.rnd.between(0, 9999999999);\n    this.rnd.sow([Globals.seed.toString()]);\n\n  } // preload\n  \n  public create ():void {\n    this.game.state.start('preload');\n\n  } // create\n\n} // Boot\n","import { Globals, SpriteType } from '../globals';\nimport { BaseSprite } from '../baseSprite';\nimport { Generator } from '../generator';\nimport { Player } from '../player';\nimport { Enemy } from '../enemy';\n\nexport class GameState extends Phaser.State {\n  public map:Phaser.Tilemap;\n  public food:BaseSprite;\n  public player:Player;\n\n  public enemies:Enemy[];\n\n  private _score:number = 0;\n  private _scoreText:Phaser.Text;\n\n  private _mapLayer:Phaser.TilemapLayer;\n\n  public create ():void {    \n    let gen:Generator = new Generator(this.game, 32, 24);\n   //let gen:Generator = new Generator(this.game, 80, 80);\n    let mapCSV:string = gen.buildMap(12, 4, 9, 2, 6);\n    this.load.tilemap('map', null, mapCSV, Phaser.Tilemap.CSV);\n    this.map = this.add.tilemap('map', Globals.TILESIZE, Globals.TILESIZE);\n    this.map.addTilesetImage('tiles');\n\n    this._mapLayer = this.map.createLayer(0);\n    this._mapLayer.resizeWorld();\n\n    this._createPlayer();\n\n    this.enemies = [];\n    for (let i = 0; i < 10; i++) {\n      this._createEnemy();\n    }\n    \n    \n    this.food = new BaseSprite(this.game, 0, 0, 'sprites', 'food');\n    this.updateFood();\n\n    this._score = 0;\n    let style = { font: '18px Arial', fill: '#ffffff', align: 'left' };\n    this._scoreText = this.game.add.text(10, 10, 'Score: 0', style);\n\n  } // create\n\n  public update ():void {\n    this.player.update();\n\n    this.enemies.forEach((enemy:Enemy) => {\n      enemy.update();\n    });\n    \n  } // update\n\n  public render ():void {\n    this.game.debug.text(this.time.fps.toString() || '--', 3, 14, '#00ff00');\n\n  } // render\n\n  public updateFood ():void {\n    let emptyPosition:boolean = false;\n    let rndX:number;\n    let rndY:number;\n    while (!emptyPosition) {\n      rndX = this.game.rnd.between(0, this.map.width - 1);\n      rndY = this.game.rnd.between(0, this.map.height - 1);\n\n      if (this.map.getTile(rndX, rndY, 0).index == 0) {\n        emptyPosition = true;\n        if (this.player.hitHead(SpriteType.NONE, rndX, rndY) ||\n            this.player.hitBody(SpriteType.NONE, rndX, rndY)) {\n          emptyPosition = false;\n        }\n      }\n    }\n    this.food.updatePosition(rndX, rndY);\n\n  } // updateFood\n\n  public updateScore (amount:number):void {\n    this._score += amount;\n    this._scoreText.text = 'Score: ' + Math.floor(this._score).toString();\n\n  } // updateScore\n\n  private _createPlayer ():void {\n    let foundPos:boolean = false;\n    let rndX:number;\n    let rndY:number;\n    while (!foundPos) {\n      rndX = this.game.rnd.between(0, this.map.width - 1);\n      rndY = this.game.rnd.between(0, this.map.height - 1);\n      \n      if ((rndX - 3) >= 0 && (rndX + 3) < this.map.width - 1) {\n        foundPos = true;\n        for (let i = (rndX - 3); i <= (rndX + 3); i++) {\n          if (this.map.getTile(i, rndY, 0).index != 0) {\n            foundPos = false;\n            break;\n          }\n        }\n      }\n    }\n    this.player = new Player(this, rndX, rndY, 250);\n\n  } // createPlayer\n\n  private _createEnemy ():void {\n    let foundPos:boolean = false;\n\n    let rndX:number;\n    let rndY:number;\n\n    while (!foundPos) {\n      rndX = this.game.rnd.between(0, this.map.width - 1);\n      rndY = this.game.rnd.between(0, this.map.height - 1);\n\n      if (this.map.getTile(rndX, rndY).index == 0) {\n        foundPos = true;\n      }\n    }\n    let enemy = new Enemy(this, rndX, rndY, 800);\n    this.enemies.push(enemy);\n  }\n\n\n} // Game\n","import { Globals } from '../globals';\n\nexport class PreloadState extends Phaser.State {\n  public preload ():void {\n    this.load.atlasJSONHash('sprites', 'assets/images/sprites.png', 'assets/images/sprites.json');\n    this.load.image('tiles', 'assets/images/tiles.png');\n\n  } // preload\n\n  public create ():void {\n    this.game.state.start('game');\n\n  } // create\n\n} // Preload\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}