{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/baseSprite.ts","src/boot.ts","src/game.ts","src/generator.ts","src/globals.ts","src/main.ts","src/preload.ts"],"names":[],"mappings":"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","file":"bundle.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","import Globals from './globals';\n\nexport default class BaseSprite extends Phaser.Sprite {\n  private _gridPosition:Phaser.Point;\n\n  constructor (game:Phaser.Game, gridX:number, gridY:number, spriteName:string ) {\n    let worldPos:Phaser.Point = Globals.toWorld(gridX, gridY);\n    super(game, worldPos.x, worldPos.y, spriteName);\n    this.anchor.set(0.5, 0.5);\n    this.game.add.existing(this);\n    this._gridPosition = new Phaser.Point(gridX, gridY);\n  }\n\n  updatePosition (gridX:number, gridY:number):void {\n    this.gridPosition.set(gridX, gridY);\n    let worldPos = Globals.toWorld(gridX, gridY);\n    this.position.set(worldPos.x, worldPos.y);\n  }\n  get gridPosition ():Phaser.Point {\n    return this._gridPosition;\n  }\n}\n","import Globals from './globals';\n\nexport default class Boot extends Phaser.State {\n  public preload ():void {\n    this.stage.disableVisibilityChange = false;\n    this.stage.smoothed = false;\n    this.scale.pageAlignHorizontally = true;\n    this.scale.pageAlignVertically = true;\n\n    Phaser.Canvas.setImageRenderingCrisp(this.game.canvas);\n\n    this.time.advancedTiming = true;\n\n    Globals.seed = this.rnd.between(0, 9999999999);\n    this.rnd.sow([Globals.seed.toString()]);\n\n  } // preload\n  \n  public create ():void {\n    this.game.state.start('preload');\n\n  } // create\n\n} // Boot\n","import Globals from './globals';\nimport BaseSprite from './baseSprite';\nimport Generator from './generator';\n\nexport default class Game extends Phaser.State {\n  private _snake:BaseSprite;\n  private _timer:number = 0;\n  private _delay:number = 250;\n\n  private _leftKey:Phaser.Key;\n  private _rightKey:Phaser.Key;\n  private _upKey:Phaser.Key;\n  private _downKey:Phaser.Key;\n\n  private _desiredRotation:number = 0;\n  private _desiredDirection:Phaser.Point = new Phaser.Point(1, 0);\n  private _currentDirection:Phaser.Point = new Phaser.Point(1, 0);\n\n  private _bodyGroup:Phaser.Group;\n  private _body:BaseSprite[];\n  private _food:BaseSprite;\n\n  private _map:Phaser.Tilemap;\n  private _mapLayer:Phaser.TilemapLayer;\n\n  public create ():void {\n\n    let gen:Generator = new Generator(this.game, 40, 30);\n    let mapCSV:string = gen.buildMap(20, 4, 8, 4, 8);\n    this.load.tilemap('map', null, mapCSV, Phaser.Tilemap.CSV);\n    this._map = this.add.tilemap('map', Globals.TILESIZE, Globals.TILESIZE);\n    this._map.addTilesetImage('tiles');\n\n    this._mapLayer = this._map.createLayer(0);\n    this._mapLayer.resizeWorld();\n\n    this.createSnake();\n\n    this._food = new BaseSprite(this.game, 0, 0, 'food');\n    this.updateFood();\n\n    this.game.camera.follow(this._snake, Phaser.Camera.FOLLOW_TOPDOWN_TIGHT);\n\n    this._leftKey = this.game.input.keyboard.addKey(Phaser.Keyboard.LEFT);\n    this._rightKey = this.game.input.keyboard.addKey(Phaser.Keyboard.RIGHT);\n    this._upKey = this.game.input.keyboard.addKey(Phaser.Keyboard.UP);\n    this._downKey = this.game.input.keyboard.addKey(Phaser.Keyboard.DOWN);\n\n  } // create\n\n  public update ():void {\n    if (this._leftKey.justDown) {\n      this._desiredDirection.set(-1, 0);\n      this._desiredRotation = 180;\n    } else if (this._rightKey.justDown) {\n      this._desiredDirection.set(1, 0);\n      this._desiredRotation = 0;\n    } else if (this._upKey.justDown) {\n      this._desiredDirection.set(0, -1);\n      this._desiredRotation = 270;\n    } else if (this._downKey.justDown) {\n      this._desiredDirection.set(0, 1);\n      this._desiredRotation = 90;\n    }\n\n    if (this._timer < this._delay) {\n      this._timer += this.time.elapsed;\n    } else {\n      this._timer = 0;\n      this.updateSnake();\n    }\n    \n  } // update\n\n  public render ():void {\n    this.game.debug.text(this.time.fps.toString() || '--', 3, 14, '#00ff00');\n\n  } // render\n\n  private createSnake ():void {\n    let snakePos:Phaser.Point = new Phaser.Point();\n    let foundPos:boolean = false;\n    let rndX:number;\n    let rndY:number;\n    while (!foundPos) {\n      rndX = this.game.rnd.between(0, this._map.width - 1);\n      rndY = this.game.rnd.between(0, this._map.height - 1);\n      \n      if ((rndX - 3) >= 0 && (rndX + 3) < this._map.width - 1) {\n        foundPos = true;\n        for (let i = (rndX - 3); i <= (rndX + 3); i++) {\n          if (this._map.getTile(i, rndY, 0).index != 0) {\n            foundPos = false;\n            break;\n          }\n        }\n      }\n    }\n    this._snake = new BaseSprite(this.game, rndX, rndY, 'head');\n    this._bodyGroup = this.add.group();\n    this._bodyGroup.classType = BaseSprite;\n    for (let i = 0; i < 100; i++) {\n      let part:BaseSprite = new BaseSprite(this.game, 0, 0, 'body');\n      part.kill();\n      this._bodyGroup.add(part);\n    }\n\n    let snakeGridPos:Phaser.Point = this._snake.gridPosition;\n    this._body = [];\n    for (let i = 1; i < 3; i++) {\n      let bodyPart:BaseSprite = this._bodyGroup.getFirstExists(false);\n      bodyPart.revive();\n      bodyPart.updatePosition(snakeGridPos.x - i, snakeGridPos.y);\n      this._body.push(bodyPart);\n    }\n  }\n\n  private updateSnake ():void {\n    let difference = Phaser.Point.add(this._desiredDirection, this._currentDirection);\n    if (difference.x != 0 || difference.y != 0) {\n      this._currentDirection = this._desiredDirection.clone();\n      this._snake.angle = this._desiredRotation;\n    }\n\n    let oldPos:Phaser.Point = this._snake.gridPosition.clone();\n\n    let newX:number = oldPos.x + this._currentDirection.x;\n    let newY:number = oldPos.y + this._currentDirection.y;\n    if (this._map.getTile(newX, newY, 0).index != 0) {\n      return;\n    }\n\n    let hitSelf:boolean = false;\n    for (let i = 0; i < this._body.length; i++) {\n      let body:BaseSprite = this._body[i];\n      if (body.gridPosition.x == newX && body.gridPosition.y == newY) {\n        hitSelf = true;\n        break;\n      }\n    }\n    if (hitSelf) {\n      return;\n    }\n\n    this._snake.updatePosition(newX, newY);\n\n    if (this._food.gridPosition.equals(this._snake.gridPosition)) {\n      var newPart:BaseSprite = this._bodyGroup.getFirstExists(false);\n      newPart.revive();\n      newPart.updatePosition(oldPos.x, oldPos.y);\n      this._body.unshift(newPart);\n\n      this.updateFood();\n    } else {\n      var lastBodyPart:BaseSprite = this._body.pop();\n      lastBodyPart.updatePosition(oldPos.x, oldPos.y);\n      this._body.unshift(lastBodyPart);\n    }\n\n  } // updateSnake\n\n  private updateFood ():void {\n    let emptyPosition:boolean = false;\n    let rndX:number;\n    let rndY:number;\n    while (!emptyPosition) {\n      rndX = this.game.rnd.between(0, this._map.width - 1);\n      rndY = this.game.rnd.between(0, this._map.height - 1);\n\n      if (this._map.getTile(rndX, rndY, 0).index == 0) {\n        emptyPosition = true;\n        if (this._snake.gridPosition.x == rndX && this._snake.gridPosition.y == rndY) {\n          emptyPosition = false;\n        }\n        for (let i = 0; i < this._body.length; i++) {\n          let body:BaseSprite = this._body[i];\n          if (body.gridPosition.x == rndX && body.gridPosition.y == rndY) {\n            emptyPosition = false;\n            break;\n          }\n        }\n      }\n    }\n\n    this._food.updatePosition(rndX, rndY);\n  } // updateFood\n\n} // Game\n","\n\nexport default class Generator {\n  private _width:number;\n  private _height:number;\n  private _game:Phaser.Game;\n\n  private _map:number[][];\n\n  constructor(game:Phaser.Game, width:number, height:number) {\n    this._game = game;\n    this._width = width;\n    this._height = height;\n    this._map = [];\n\n    for (let y = 0; y < height; y++) {\n      let row:number[] = [];\n      for (let x = 0; x < width; x++) {\n        row.push(1);\n      }\n      this._map.push(row);\n    }\n\n  } // constructor\n\n  public buildMap (nrRooms:number, minSize:number, maxSize:number, minOverlap:number, maxOverlap:number):string {\n    let room:Phaser.Rectangle = this.getRndRoom(minSize, maxSize, true);\n    this.createRoom(room);\n\n    let totalRooms:number = 1;\n\n    let totalTries:number = 300;\n    let timesTried:number = 0;\n    let foundPlace:boolean = false;\n    while (totalRooms < nrRooms) {\n      timesTried = 0;\n      foundPlace = false;\n      while(!foundPlace && timesTried < totalTries) {\n        room = this.getRndRoom(minSize, maxSize, false);\n        let overlap:number = this.countTiles(room);\n        if (overlap >= minOverlap && overlap <= maxOverlap) {\n          foundPlace = true;\n          this.createRoom(room);\n        }\n        timesTried++;\n      }\n      totalRooms++;\n    }\n\n    this.removeDoubleWalls();\n\n    return this.getCSV();\n\n  } // buildMap\n\n  private getRndRoom (minSize:number, maxSize:number, firstRoom:boolean):Phaser.Rectangle {\n    let roomWidth:number = this._game.rnd.between(minSize, maxSize);\n    let roomHeight:number = this._game.rnd.between(minSize, maxSize);\n    let x:number;\n    let y:number;\n    if (firstRoom) {\n      x = Math.floor(this._width * 0.5 - roomWidth * 0.5);\n      y = Math.floor(this._height * 0.5 - roomHeight * 0.5);\n    } else {\n      x = this._game.rnd.between(1, this._width - roomWidth - 1);\n      y = this._game.rnd.between(1, this._height - roomHeight - 1);\n    }\n\n    return new Phaser.Rectangle(x, y, roomWidth, roomHeight);\n\n  } // getRndRoom\n\n  private countTiles (room:Phaser.Rectangle):number {\n    let count = 0;\n    for (let y = room.y; y < room.y + room.height; y++) {\n      for (let x = room.x; x < room.x + room.width; x++) {\n        if (this._map[y][x] == 0) {\n          count++;\n        }\n      }\n    }\n\n    return count;\n\n  } // countTiles\n\n  private createRoom (room:Phaser.Rectangle):void {\n    for (let y = room.y; y < room.y + room.height; y++) {\n      for (let x = room.x; x < room.x + room.width; x++) {\n        this._map[y][x] = 0;\n      }\n    }\n  } // createRoom\n\n  private allNeigborsAreWalls (x:number, y:number):boolean {\n    if (x - 1 >= 0 && y - 1 >= 0 && this._map[y - 1][x - 1] == 0) {\n      return false;\n    }\n\n    if (x - 1 >= 0 && this._map[y][x - 1] == 0) {\n      return false;\n    }\n\n    if (x - 1 >= 0 && y + 1 < this._height && this._map[y + 1][x - 1] == 0) {\n      return false;\n    }\n\n    if (y + 1 < this._height && this._map[y + 1][x] == 0) {\n      return false;\n    }\n\n    if (x + 1 < this._width && y + 1 < this._height && this._map[y + 1][x + 1] == 0) {\n      return false;\n    }\n\n    if (x + 1 < this._width && this._map[y][x + 1] == 0) {\n      return false;\n    }\n\n    if (x + 1 < this._width && y - 1 >= 0 && this._map[y - 1][x + 1] == 0) {\n      return false;\n    }\n\n    if (y - 1 >= 0 && this._map[y - 1][x] == 0) {\n      return false;\n    }\n\n    return true;\n\n  } // allNeighborsAreWalls\n\n  private removeDoubleWalls ():void {\n    let wallsToRemove:Phaser.Point[] = [];\n    for (let y = 0; y < this._height; y++) {\n      for (let x = 0; x < this._width; x++) {\n        if (this.allNeigborsAreWalls(x, y)) {\n          wallsToRemove.push(new Phaser.Point(x, y));\n        }\n      }\n    }\n\n    for (let i = 0; i < wallsToRemove.length; i++) {\n      let wallPos:Phaser.Point = wallsToRemove[i];\n      this._map[wallPos.y][wallPos.x] = 2;\n    }\n\n  } // remvoeDoubleWalls\n\n  private getCSV ():string {\n    let csvString:string = '';\n    for (let y = 0; y < this._height; y++) {\n      for (let x = 0; x < this._width; x++) {\n        csvString += this._map[y][x].toString();\n        csvString += ',';\n      }\n      csvString = csvString.replace(/,\\s*$/, '');\n      csvString += '\\n';\n    }\n\n    return csvString;\n\n  } // getCSV\n\n} // Generator\n","export default class Globals {\n  public static readonly TILESIZE:number = 20;\n  \n  public static seed:number = 0;\n\n  public static toGrid (x:number, y:number):Phaser.Point {\n    return new Phaser.Point(Math.floor(x / Globals.TILESIZE), Math.floor(y / Globals.TILESIZE));\n  }\n\n  public static toWorld (x:number, y:number):Phaser.Point {\n    return new Phaser.Point(x * Globals.TILESIZE + Globals.TILESIZE * 0.5,\n      y * Globals.TILESIZE + Globals.TILESIZE * 0.5);\n  }\n}\n","\nimport Boot from './boot';\nimport Preload from './preload';\nimport Game from './game';\n\nclass Main extends Phaser.Game {\n  public test: 'testing';\n\n  constructor () {\n    super(640, 480, Phaser.AUTO, 'container', null);\n\n    this.state.add('boot', Boot);\n    this.state.add('preload', Preload);\n    this.state.add('game', Game);\n\n    this.state.start('boot');\n\n  } // constructor\n\n} // Main\n\nwindow.onload = () => {\n  new Main();\n\n}; // window.onload\n","import Globals from './globals';\n\nexport default class Preload extends Phaser.State {\n  public preload ():void {\n    this.load.image('head', 'assets/images/head.png');\n    this.load.image('body', 'assets/images/body.png');\n    //this.load.image('wall', 'assets/images/wall.png');\n    this.load.image('food', 'assets/images/food.png');\n    this.load.image('tiles', 'assets/images/walls.png');\n\n  } // preload\n\n  public create ():void {\n    console.log(Globals.seed);\n    this.game.state.start('game');\n\n  } // create\n\n} // Preload\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}